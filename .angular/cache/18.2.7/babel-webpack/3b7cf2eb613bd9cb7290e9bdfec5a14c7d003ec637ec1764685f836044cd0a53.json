{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"*\"];\nfunction ProgressbarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", ctx_r0.type)(\"value\", ctx_r0._value)(\"max\", ctx_r0.max)(\"animate\", ctx_r0.animate)(\"striped\", ctx_r0.striped);\n  }\n}\nfunction ProgressbarComponent_ng_template_3_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"type\", item_r2.type)(\"value\", item_r2.value)(\"max\", item_r2.max || ctx_r0.max)(\"animate\", ctx_r0.animate)(\"striped\", ctx_r0.striped);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(item_r2.label);\n  }\n}\nfunction ProgressbarComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ProgressbarComponent_ng_template_3_bar_0_Template, 2, 6, \"bar\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0._values);\n  }\n}\nlet BarComponent = /*#__PURE__*/(() => {\n  class BarComponent {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      /** maximum total value of progress element */\n      this.max = 100;\n      /** current value of progress bar */\n      this.value = 0;\n      /** if `true` changing value of progress bar will be animated */\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n      this.striped = false;\n      /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n      this.type = 'info';\n      this.percent = 100;\n    }\n    ngOnChanges(changes) {\n      if (changes[\"value\"] || changes[\"max\"]) {\n        this.percent = 100 * (Number(changes[\"value\"]?.currentValue || this.value) / Number(changes[\"max\"]?.currentValue || this.max || 100));\n      }\n      if (changes[\"type\"]) {\n        this.applyTypeClasses();\n      }\n    }\n    applyTypeClasses() {\n      if (this._prevType) {\n        const barTypeClass = `progress-bar-${this._prevType}`;\n        const bgClass = `bg-${this._prevType}`;\n        this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n        this.renderer.removeClass(this.el.nativeElement, bgClass);\n        this._prevType = void 0;\n      }\n      if (this.type) {\n        const barTypeClass = `progress-bar-${this.type}`;\n        const bgClass = `bg-${this.type}`;\n        this.renderer.addClass(this.el.nativeElement, barTypeClass);\n        this.renderer.addClass(this.el.nativeElement, bgClass);\n        this._prevType = this.type;\n      }\n    }\n    static {\n      this.ɵfac = function BarComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: BarComponent,\n        selectors: [[\"bar\"]],\n        hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n        hostVars: 13,\n        hostBindings: function BarComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n            i0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.percent, \"%\");\n            i0.ɵɵclassProp(\"progress-bar\", true)(\"progress-bar-animated\", ctx.animate)(\"progress-bar-striped\", ctx.striped);\n          }\n        },\n        inputs: {\n          max: \"max\",\n          value: \"value\",\n          animate: \"animate\",\n          striped: \"striped\",\n          type: \"type\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function BarComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return BarComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ProgressbarConfig = /*#__PURE__*/(() => {\n  class ProgressbarConfig {\n    constructor() {\n      /** if `true` changing value of progress bar will be animated */\n      this.animate = false;\n      /** maximum total value of progress element */\n      this.max = 100;\n    }\n    static {\n      this.ɵfac = function ProgressbarConfig_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProgressbarConfig)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ProgressbarConfig,\n        factory: ProgressbarConfig.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProgressbarConfig;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ProgressbarComponent = /*#__PURE__*/(() => {\n  class ProgressbarComponent {\n    /** current value of progress bar. Could be a number or array of objects\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n     */\n    set value(value) {\n      this.isStacked = Array.isArray(value);\n      if (typeof value === 'number') {\n        this._value = value;\n        this._values = void 0;\n      } else {\n        this._value = void 0;\n        this._values = value;\n      }\n    }\n    constructor(config) {\n      /** maximum total value of progress element */\n      this.max = 100;\n      /** if `true` changing value of progress bar will be animated */\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n      this.striped = false;\n      this.isStacked = false;\n      this._value = 0;\n      Object.assign(this, config);\n    }\n    static {\n      this.ɵfac = function ProgressbarComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProgressbarComponent)(i0.ɵɵdirectiveInject(ProgressbarConfig));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: ProgressbarComponent,\n        selectors: [[\"progressbar\"]],\n        hostVars: 3,\n        hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"max\", ctx.max);\n            i0.ɵɵclassProp(\"progress\", true);\n          }\n        },\n        inputs: {\n          max: \"max\",\n          animate: \"animate\",\n          striped: \"striped\",\n          type: \"type\",\n          value: \"value\"\n        },\n        ngContentSelectors: _c0,\n        decls: 5,\n        vars: 3,\n        consts: [[\"NotStacked\", \"\"], [\"Stacked\", \"\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\", 4, \"ngFor\", \"ngForOf\"]],\n        template: function ProgressbarComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵtemplate(0, ProgressbarComponent_ng_container_0_Template, 1, 0, \"ng-container\", 2)(1, ProgressbarComponent_ng_template_1_Template, 2, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(3, ProgressbarComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n          }\n          if (rf & 2) {\n            const NotStacked_r3 = i0.ɵɵreference(2);\n            const Stacked_r4 = i0.ɵɵreference(4);\n            i0.ɵɵproperty(\"ngIf\", !ctx.isStacked)(\"ngIfThen\", NotStacked_r3)(\"ngIfElse\", Stacked_r4);\n          }\n        },\n        dependencies: [i2.NgForOf, i2.NgIf, BarComponent],\n        styles: [\"[_nghost-%COMP%]{width:100%;display:flex}\"],\n        changeDetection: 0\n      });\n    }\n  }\n  return ProgressbarComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ProgressbarModule = /*#__PURE__*/(() => {\n  class ProgressbarModule {\n    static forRoot() {\n      return {\n        ngModule: ProgressbarModule,\n        providers: []\n      };\n    }\n    static {\n      this.ɵfac = function ProgressbarModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProgressbarModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: ProgressbarModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [CommonModule]\n      });\n    }\n  }\n  return ProgressbarModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BarComponent, ProgressbarComponent, ProgressbarConfig, ProgressbarModule };\n//# sourceMappingURL=ngx-bootstrap-progressbar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}