{"ast":null,"code":"import { Component, Input, Output, HostListener, forwardRef, EventEmitter, ViewChild, Renderer2, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n/** @type {?} */\nconst callback = () => {};\n/** @type {?} */\nconst CUSTOM_INPUT = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => JwBootstrapSwitchNg2Component),\n  multi: true\n};\nclass JwBootstrapSwitchNg2Component {\n  /**\r\n   * @param {?} cd\r\n   * @param {?} render\r\n   */\n  constructor(cd, render) {\n    this.cd = cd;\n    this.render = render;\n    // Defining Default Options for Switch\n    this.handleWidth = 0;\n    this.labelWidth = 0;\n    this.labelText = '';\n    this.inverse = false;\n    this.baseClass = 'bootstrap-switch';\n    this.onText = 'ON';\n    this.offText = 'OFF';\n    this.disabled = false;\n    this.readonly = false;\n    this._focused = false;\n    this._size = 'normal';\n    this._animate = true;\n    this._innerAnimate = true;\n    this._indeterminate = false;\n    this._onColor = 'primary';\n    this._offColor = 'default';\n    this._wrapperClass = 'wrapper';\n    this._innerState = false;\n    this._innerHandleWidth = 'auto';\n    this._innerLabelWidth = 'auto';\n    this._dragStart = null;\n    this._dragEnd = null;\n    this._onTouchedCallback = callback;\n    this._onChangeCallback = callback;\n    this.changeState = new EventEmitter();\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  $on() {\n    return this.on.nativeElement;\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  $off() {\n    return this.off.nativeElement;\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  $label() {\n    return this.label.nativeElement;\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  $container() {\n    return this.container.nativeElement;\n  }\n  /**\r\n   * \\@description: Function to set the Classes for the Wrapper Div\r\n   * @return {?} string\r\n   */\n  getWrapperClasses() {\n    /** @type {?} */\n    let output = this.baseClass + ' ' + this.baseClass + '-' + this._wrapperClass;\n    if (this._focused) {\n      output += ' ' + this.baseClass + '-focused';\n    }\n    if (this.readonly) {\n      output += ' ' + this.baseClass + '-readonly';\n    }\n    if (this._size != null) {\n      output += ' ' + this.baseClass + '-' + this._size;\n    }\n    if (this._innerState) {\n      output += ' ' + this.baseClass + '-on';\n    } else {\n      output += ' ' + this.baseClass + '-off';\n    }\n    if (this._animate) {\n      output += ' ' + this.baseClass + '-animate';\n    }\n    if (this.disabled) {\n      output += ' ' + this.baseClass + '-disabled';\n    }\n    if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {\n      output += ' ' + this.baseClass + '-indeterminate';\n    }\n    if (this.inverse) {\n      output += ' ' + this.baseClass + '-inverse';\n    }\n    return output;\n  }\n  /**\r\n   * \\@description Function to set the css classes for #on\r\n   * @return {?} string\r\n   */\n  getOnClasses() {\n    /** @type {?} */\n    let output = this.baseClass + '-handle-on';\n    if (this._onColor) {\n      output += ' ' + this.baseClass + '-' + this._onColor;\n    }\n    return output;\n  }\n  /**\r\n   * \\@description Function to set the css classes for #off\r\n   * @return {?} string\r\n   */\n  getOffClasses() {\n    /** @type {?} */\n    let output = this.baseClass + '-handle-off';\n    if (this._offColor) {\n      output += ' ' + this.baseClass + '-' + this._offColor;\n    }\n    return output;\n  }\n  /**\r\n   * \\@description Function set the marging of the #label when change the state\r\n   * @return {?} string\r\n   */\n  getLabelMarginLeft() {\n    /** @type {?} */\n    let width = this.inverse ? -this.handleWidth : 0;\n    if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {\n      width = -(this.handleWidth / 2);\n    } else if (this._dragEnd) {\n      width = this._dragEnd;\n    } else if (!this._innerState) {\n      if (!this.inverse) {\n        width = -this.handleWidth;\n      } else {\n        width = 0;\n      }\n    }\n    return width + 'px';\n  }\n  /**\r\n   * @param {?} changes\r\n   * @return {?}\r\n   */\n  ngOnChanges(changes) {\n    if (changes['setLabelText'] || changes['setOnText'] || changes['setHandleWidth'] || changes['setLabelWidth'] || changes['setOffText'] || changes['setSize']) {\n      this.calculateWith(true);\n    }\n  }\n  /**\r\n   * @return {?}\r\n   */\n  ngAfterViewInit() {\n    this.calculateWith();\n  }\n  /**\r\n   * @return {?}\r\n   */\n  onClick() {\n    if (!this.disabled && !this.readonly && !this._dragEnd) {\n      this.setStateValue(!this._innerState);\n    } else if (this._dragEnd) {\n      this._dragEnd = null;\n    }\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onKeyDown(e) {\n    if (!e.which || this.disabled || this.readonly) {\n      return;\n    }\n    switch (e.which) {\n      case 37:\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        this.setStateValue(false);\n        break;\n      case 39:\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        this.setStateValue(true);\n        break;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onDragStart(e) {\n    if (e.target === this.$label()) {\n      if (this._dragStart || this.disabled || this.readonly) {\n        return;\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      this._dragStart = (e.pageX || e.touches[0].pageX) - parseInt(this.$container().style.marginLeft, 10);\n      if (this._animate) {\n        this._animate = !this._animate;\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onDragMove(e) {\n    if (this._dragStart) {\n      e.preventDefault();\n      /** @type {?} */\n      const difference = (e.pageX || e.touches[0].pageX) - this._dragStart;\n      if (difference < -Number(this.handleWidth) || difference > 0) {\n        return;\n      }\n      this._dragEnd = difference;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {?} e\r\n   * @param {?=} removeDragEnd\r\n   * @return {?}\r\n   */\n  onDragEnd(e, removeDragEnd = false) {\n    if (this._dragStart) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (this._dragEnd) {\n        /** @type {?} */\n        const state = this._dragEnd > -(Number(this.handleWidth) / 2);\n        this.setStateValue(this.inverse ? !state : state);\n      }\n      this._dragStart = null;\n      if (removeDragEnd) {\n        this._dragEnd = null;\n      }\n      if (this._innerAnimate) {\n        this._animate = true;\n      }\n    }\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onTouchStart(e) {\n    this.onDragStart(e);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onMouseDown(e) {\n    this.onDragStart(e);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onTouchMove(e) {\n    this.onDragMove(e);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onMouseMove(e) {\n    this.onDragMove(e);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onMouseUp(e) {\n    this.onDragEnd(e);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onTouchEnd(e) {\n    this.onDragEnd(e, true);\n  }\n  /**\r\n   * @param {?} e\r\n   * @return {?}\r\n   */\n  onMouseLeave(e) {\n    this.onDragEnd(e, true);\n  }\n  /**\r\n   * @return {?}\r\n   */\n  onFocus() {\n    this._focused = true;\n  }\n  /**\r\n   * @return {?}\r\n   */\n  onBlur() {\n    this._focused = false;\n    this._onTouchedCallback();\n  }\n  /**\r\n   * \\@description Function to make recalculate the size of the elements when options change\r\n   * @private\r\n   * @param {?=} disableAnimation\r\n   * @return {?}\r\n   */\n  calculateWith(disableAnimation = false) {\n    if (disableAnimation && this._innerAnimate) {\n      this._animate = false;\n    }\n    setTimeout(() => {\n      this.render.setStyle(this.$on(), 'width', 'auto');\n      this.render.setStyle(this.$off(), 'width', 'auto');\n      this.render.setStyle(this.$label(), 'width', 'auto');\n      /** @type {?} */\n      const width = this._innerHandleWidth === 'auto' ? Math.max(this.$on().offsetWidth, this.$off().offsetWidth) : this._innerHandleWidth;\n      if (this.$label().offsetWidth < width) {\n        if (this._innerLabelWidth === 'auto') {\n          this.labelWidth = Number(width);\n        } else {\n          this.labelWidth = Number(this._innerLabelWidth);\n        }\n      } else {\n        if (this._innerLabelWidth === 'auto') {\n          this.labelWidth = this.$label().offsetWidth;\n        } else {\n          this.labelWidth = Number(this._innerLabelWidth);\n        }\n      }\n      this.handleWidth = Number(width);\n      this.render.setStyle(this.$label(), 'width', this.labelWidth + 'px');\n      this.render.setStyle(this.$on(), 'width', this.handleWidth + 'px');\n      this.render.setStyle(this.$off(), 'width', this.handleWidth + 'px');\n      setTimeout(() => {\n        if (disableAnimation && this._innerAnimate) {\n          this._animate = true;\n        }\n      });\n      this.cd.markForCheck();\n    });\n  }\n  // Functions to set inputs and the private variables of the Switch\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setBaseClass(value) {\n    this.baseClass = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setWrapperClass(value) {\n    this._wrapperClass = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setOffText(value) {\n    this.offText = value ? value : 'OFF';\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setLabelText(value) {\n    this.labelText = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setOnText(value) {\n    this.onText = value ? value : 'ON';\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setSize(value) {\n    if (value) {\n      this._size = value;\n    }\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setAnimate(value) {\n    this._animate = value;\n    this._innerAnimate = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setOnColor(value) {\n    if (value) {\n      this._onColor = value;\n    }\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setOffColor(value) {\n    if (value) {\n      this._offColor = value;\n    }\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setDisabled(value) {\n    this.disabled = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setReadOnly(value) {\n    this.readonly = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setIndeterminate(value) {\n    this._indeterminate = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setInverse(value) {\n    this.inverse = value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setHandleWidth(value) {\n    this._innerHandleWidth = typeof value !== 'undefined' ? value : 'auto';\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  set setLabelWidth(value) {\n    this._innerLabelWidth = typeof value !== 'undefined' ? value : 'auto';\n  }\n  /**\r\n   * @return {?}\r\n   */\n  get value() {\n    return this._innerState;\n  }\n  /**\r\n   * @param {?} v\r\n   * @return {?}\r\n   */\n  set value(v) {\n    if (v === null || typeof v === 'undefined') {\n      this._indeterminate = true;\n    }\n    this.setStateValue(v);\n  }\n  /**\r\n   * @private\r\n   * @param {?} v\r\n   * @return {?}\r\n   */\n  setStateValue(v) {\n    if (v !== this._innerState) {\n      this._onChangeCallback(v);\n      this.changeState.emit({\n        previousValue: this._innerState,\n        currentValue: v\n      });\n      this._innerState = v;\n    }\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  writeValue(value) {\n    if (value !== this._innerState) {\n      this._innerState = value;\n      this.cd.markForCheck();\n    }\n  }\n  /**\r\n   * @param {?} isDisabled\r\n   * @return {?}\r\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\r\n   * @param {?} fn\r\n   * @return {?}\r\n   */\n  registerOnChange(fn) {\n    this._onChangeCallback = fn;\n  }\n  /**\r\n   * @param {?} fn\r\n   * @return {?}\r\n   */\n  registerOnTouched(fn) {\n    this._onTouchedCallback = fn;\n  }\n}\n\n/** @nocollapse */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass JwBootstrapSwitchNg2Module {}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { JwBootstrapSwitchNg2Component, JwBootstrapSwitchNg2Module };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}