{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { OnChange } from 'ngx-bootstrap/utils';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"*\"];\nfunction AlertComponent_ng_template_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function AlertComponent_ng_template_0_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.close());\n    });\n    i0.ɵɵelementStart(1, \"span\", 3);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 4);\n    i0.ɵɵtext(4, \"Close\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AlertComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, AlertComponent_ng_template_0_ng_template_1_Template, 5, 0, \"ng-template\", 0);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(\"alert alert-\" + ctx_r1.type);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.dismissible);\n  }\n}\nlet AlertConfig = /*#__PURE__*/(() => {\n  class AlertConfig {\n    constructor() {\n      /** default alert type */\n      this.type = 'warning';\n      /** is alerts are dismissible by default */\n      this.dismissible = false;\n      /** default time before alert will dismiss */\n      this.dismissOnTimeout = undefined;\n    }\n    static {\n      this.ɵfac = function AlertConfig_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AlertConfig)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: AlertConfig,\n        factory: AlertConfig.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AlertConfig;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(_config, changeDetection) {\n      this.changeDetection = changeDetection;\n      /** Alert type.\n       * Provides one of four bootstrap supported contextual classes:\n       * `success`, `info`, `warning` and `danger`\n       */\n      this.type = 'warning';\n      /** If set, displays an inline \"Close\" button */\n      this.dismissible = false;\n      /** Is alert visible */\n      this.isOpen = true;\n      /** This event fires immediately after close instance method is called,\n       * $event is an instance of Alert component.\n       */\n      this.onClose = new EventEmitter();\n      /** This event fires when alert closed, $event is an instance of Alert component */\n      this.onClosed = new EventEmitter();\n      this.classes = '';\n      this.dismissibleChange = new EventEmitter();\n      Object.assign(this, _config);\n      this.dismissibleChange.subscribe((/*dismissible: boolean*/\n      ) => {\n        this.classes = this.dismissible ? 'alert-dismissible' : '';\n        this.changeDetection.markForCheck();\n      });\n    }\n    ngOnInit() {\n      if (this.dismissOnTimeout) {\n        // if dismissOnTimeout used as attr without binding, it will be a string\n        setTimeout(() => this.close(), parseInt(this.dismissOnTimeout, 10));\n      }\n    }\n    // todo: animation ` If the .fade and .in classes are present on the element,\n    // the alert will fade out before it is removed`\n    /**\n     * Closes an alert by removing it from the DOM.\n     */\n    close() {\n      if (!this.isOpen) {\n        return;\n      }\n      this.onClose.emit(this);\n      this.isOpen = false;\n      this.changeDetection.markForCheck();\n      this.onClosed.emit(this);\n    }\n    static {\n      this.ɵfac = function AlertComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AlertComponent)(i0.ɵɵdirectiveInject(AlertConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: AlertComponent,\n        selectors: [[\"alert\"], [\"bs-alert\"]],\n        inputs: {\n          type: \"type\",\n          dismissible: \"dismissible\",\n          dismissOnTimeout: \"dismissOnTimeout\",\n          isOpen: \"isOpen\"\n        },\n        outputs: {\n          onClose: \"onClose\",\n          onClosed: \"onClosed\"\n        },\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 1,\n        consts: [[3, \"ngIf\"], [\"role\", \"alert\", 3, \"ngClass\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", \"btn-close\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"visually-hidden\"], [1, \"sr-only\", \"visually-hidden\"]],\n        template: function AlertComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵtemplate(0, AlertComponent_ng_template_0_Template, 3, 4, \"ng-template\", 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n          }\n        },\n        dependencies: [i2.NgClass, i2.NgIf],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  __decorate([OnChange(), __metadata(\"design:type\", Object)], AlertComponent.prototype, \"dismissible\", void 0);\n  return AlertComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AlertModule = /*#__PURE__*/(() => {\n  class AlertModule {\n    static forRoot() {\n      return {\n        ngModule: AlertModule,\n        providers: []\n      };\n    }\n    static {\n      this.ɵfac = function AlertModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AlertModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: AlertModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [CommonModule]\n      });\n    }\n  }\n  return AlertModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AlertComponent, AlertConfig, AlertModule };\n//# sourceMappingURL=ngx-bootstrap-alert.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}